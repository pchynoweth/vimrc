"------------------------------------------------------------
" Features {{{1

set nocompatible
set background=dark

filetype indent plugin on

" Enable syntax highlighting
syntax on

" Change leader to comma
let mapleader = ","
let maplocalleader = "_"

" folding
set foldmethod=marker

" Vim with default settings does not allow easy switching between multiple files
" in the same editor window. Users can use multiple split windows or multiple
" tab pages to edit multiple files, but it is still best to enable an option to
" allow easier switching between files.
"
" One such option is the 'hidden' option, which allows you to re-use the same
" window and switch from an unsaved buffer without saving it first. Also allows
" you to keep an undo history for multiple files when re-using the same window
" in this way. Note that using persistent undo also lets you undo in multiple
" files even in the same window, but is less efficient and is actually designed
" for keeping undo history after closing Vim entirely. Vim will complain if you
" try to quit without saving, and swap files will keep you safe if your computer
" crashes.
set hidden

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" display tabs and trailing whitespace
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:.

"------------------------------------------------------------
" Usability options {{{1

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=

" Enable use of the mouse for all modes
set mouse=a

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F11>

set undofile                " persistent undo
set undodir=$HOME/.vim/undo
set undolevels=1000         " Maximum number of changes that can be undone
set undoreload=10000        " Maximum number lines to save for undo on a buffer reload

" create undo directory
if !isdirectory(&undodir)
    call mkdir(&undodir)
endif

"------------------------------------------------------------
" Indentation options {{{1

" Indentation settings for using 4 spaces instead of tabs.
set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab
set smartindent

"------------------------------------------------------------
" Mappings {{{1

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Code folding options
nmap <leader>f0 :set foldlevel=0<CR>
nmap <leader>f1 :set foldlevel=1<CR>
nmap <leader>f2 :set foldlevel=2<CR>
nmap <leader>f3 :set foldlevel=3<CR>
nmap <leader>f4 :set foldlevel=4<CR>
nmap <leader>f5 :set foldlevel=5<CR>
nmap <leader>f6 :set foldlevel=6<CR>
nmap <leader>f7 :set foldlevel=7<CR>
nmap <leader>f8 :set foldlevel=8<CR>
nmap <leader>f9 :set foldlevel=9<CR>

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

 " Tab navigation with H and L
nnoremap H gT
nnoremap L gt

" Tab navigation like Firefox (only works with gvim).
nnoremap <C-S-tab> gT
nnoremap <C-tab>   gt
nnoremap <C-t>     :tabnew<CR>
inoremap <C-S-tab> <Esc>gTi
inoremap <C-tab>   <Esc>gti
inoremap <C-t>     <Esc>:tabnew<CR>

set matchpairs+=<:> " Match, to be used with %

"------------------------------------------------------------
" vim-plug {{{1

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
" Plugins can be found in .vimrc.bundle
source ~/.vimrc.plugin
call plug#end()

"------------------------------------------------------------
" Workarounds {{{1
"
" workarounds to make vim plugins play nice

" " Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
  if exists(':NeoCompleteLock')==2
    exe 'NeoCompleteLock'
  endif
  if exists(':PasteEasyDisable')==2
    exe 'PasteEasyDisable'
  endif
endfunction

" Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
  if exists(':NeoCompleteUnlock')==2
    exe 'NeoCompleteUnlock'
  endif
  if exists(':PasteEasyEnable')==2
    exe 'PasteEasyEnable'
  endif
endfunction

"------------------------------------------------------------
" Plugin Config {{{1

if globpath(&runtimepath, '*/CamelCaseMotion/') !=# ''
    call camelcasemotion#CreateMotionMappings('<leader>')
endif

    " ctrlp {{{
        if isdirectory(expand("~/.vim/plugged/ctrlp.vim/"))
            let g:ctrlp_working_path_mode = 'ra'
            let g:ctrlp_regexp = 1
            nnoremap <silent> <D-t> :CtrlP<CR>
            nnoremap <silent> <D-r> :CtrlPMRU<CR>
            let g:ctrlp_custom_ignore = {
                \ 'dir':  '\.git$\|\.hg$\|\.svn$',
                \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

            if executable('ag')
                let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
            elseif executable('ack-grep')
                let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
            elseif executable('ack')
                let s:ctrlp_fallback = 'ack %s --nocolor -f'
            else
                let s:ctrlp_fallback = 'find %s -type f'
            endif
            if exists("g:ctrlp_user_command")
                unlet g:ctrlp_user_command
            endif
            let g:ctrlp_user_command = {
                \ 'types': {
                    \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                    \ 2: ['.hg', 'hg --cwd %s locate -I .'],
                \ },
                \ 'fallback': s:ctrlp_fallback
            \ }

            if isdirectory(expand("~/.vim/plugged/ctrlp-funky/"))
                " CtrlP extensions
                let g:ctrlp_extensions = ['funky']

                "funky
                nnoremap <Leader>fu :CtrlPFunky<Cr>
            endif
        endif
    "}}}
    " vim-textobj-parameter {{{
        let g:vim_textobj_parameter_mapping = 'a'
    " }}}
    " vim-cmake {{{
        let s:git_root = systemlist("git rev-parse --show-toplevel")
        if filereadable("CMakeLists.txt") && !empty(s:git_root)
            let g:cmake_build_dir_override = s:git_root[0] . "/build"
            let g:cmake_project = systemlist("command grep -oP '(?<=project\\\()\\\w+' CMakeLists.txt")
            function s:make_extras_make(...)
                exec "CMake"
                if empty(a:000)
                    exec "make " . g:cmake_project[0]
                else
                    exec "make " . join(a:000)
                endif
            endfunction
            if !empty(g:cmake_project)
                command! -nargs=? CMakeBuild call s:make_extras_make(<f-args>)
            endif
        endif
        unlet s:git_root
        let g:cmake_project_generator="Ninja"
    " }}}
let g:alternateSearchPath = 'sfr:../../src,reg:|/\([^/]\+\)/src|/\1/include/\1||,sfr:../include,sfr:..'
let g:vim_namespace_obj_map_keys = 1
let g:alternateNoDefaultAlternate = 1

command! PlugRefresh PlugClean! | PlugUpgrade | PlugUpdate

"------------------------------------------------------------
" Restore Cursor Position {{{1
function! ResCur()
    if line("'\"") <= line("$")
        silent! normal! g`"
        return 1
    endif
endfunction

augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END
"------------------------------------------------------------
" File Specific Options {{{1

    " Instead of reverting the cursor to the last position in the buffer, we
    " set it to the first line when editing a git commit message
    au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

"------------------------------------------------------------
